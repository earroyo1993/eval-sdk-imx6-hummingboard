
ifeq ($(DEVDIR),)
$(error ====== DEVDIR variable is empty, invoke this Makefile from the BSP root, or provide the path to it =====)
endif

ifeq ($(findstring /sbin,$(PATH)),)
# Assume the PATH doesn't contain sbin paths and append them to the end
export PATH := $(PATH):/usr/local/sbin:/usr/sbin:/sbin
endif

ifeq ($(MAKECMDGOALS),sim)
export SIMULATOR=yes
endif

ifeq ($(CONFIG_TOOLCHAIN_HARDFP),y)
    TOOLCHAIN_PREFIX := arm-unknown-linux-gnueabihf
    TOOLCHAIN_PATH := $(CONFIG_TOOLCHAIN_PATH_HARDFP)
    TOOLCHAIN_ARCH_FLAGS := $(CONFIG_TOOLCHAIN_ARCH_FLAGS_HARDFP)
else
    TOOLCHAIN_PREFIX := arm-linux-gnueabi
    TOOLCHAIN_PATH := $(CONFIG_TOOLCHAIN_PATH_SOFTFP)
    TOOLCHAIN_ARCH_FLAGS := $(CONFIG_TOOLCHAIN_ARCH_FLAGS_SOFTFP)
endif

TOOLCHAIN_BIN_PATH := $(TOOLCHAIN_PATH)

ifeq ($(CONFIG_TOOLCHAIN_PATH_PER_COMPONENT),y)  
  ifeq ($(USE_KERNEL_TOOLCHAIN),y)
    TOOLCHAIN_PATH := $(CONFIG_KERNEL_TOOLCHAIN_PATH)
  else ifeq ($(USE_BOOTLOADER_TOOLCHAIN),y)
    TOOLCHAIN_PATH := $(CONFIG_BOOTLOADER_TOOLCHAIN_PATH)
  endif
endif

# clean up invalid characters in TOOLCHAIN_PATH (otherwise findstring fails)
C := $(shell echo $(TOOLCHAIN_PATH))

BSP_PATH := $(if $(findstring xxx$(C),xxx$(PATH)),$(PATH),$(C)/bin:$(PATH))
EXECUTE	:= export PATH=$(value BSP_PATH) ;

AUTOTOOLS_TOOLCHAIN_PREFIX := $(TOOLCHAIN_PREFIX)
ifeq ($(CONFIG_TOOLCHAIN_HARDFP),y)
TOOLCHAIN_LIB	:= $(TOOLCHAIN_BIN_PATH)/$(TOOLCHAIN_PREFIX)/libc/lib/
else
TOOLCHAIN_LIB	:= $(TOOLCHAIN_BIN_PATH)/$(TOOLCHAIN_PREFIX)/libc/lib/$(TOOLCHAIN_PREFIX)
endif
TOOLCHAIN_BIN	:= $(TOOLCHAIN_BIN_PATH)/bin

ifeq ($(SIMULATOR),yes)
  TOOLCHAIN_PREFIX = ""
  CFLAGS += $(CONFIG_TOOLCHAIN_SIMULATOR_FLAGS)
  CC = gcc
  CPP = gcc -E
  LD = ld
  AR = ar
  AS = as
  OBJCOPY = objcopy
  OBJDUMP = objdump
  STRIP = strip
  CXX = g++
  RANLIB = ranlib
else
  CFLAGS += $(CONFIG_TOOLCHAIN_NOARCH_FLAGS) $(TOOLCHAIN_ARCH_FLAGS)
  CC = $(TOOLCHAIN_PREFIX)-gcc
  CPP = $(TOOLCHAIN_PREFIX)-gcc -E
  CXX = $(TOOLCHAIN_PREFIX)-g++
  LD = $(TOOLCHAIN_PREFIX)-ld
  AR = $(TOOLCHAIN_PREFIX)-ar
  AS = $(TOOLCHAIN_PREFIX)-as
  NM = $(TOOLCHAIN_PREFIX)-nm
  OBJCOPY = $(TOOLCHAIN_PREFIX)-objcopy
  OBJDUMP = $(TOOLCHAIN_PREFIX)-objdump
  STRIP = $(TOOLCHAIN_PREFIX)-strip
  RANLIB = $(TOOLCHAIN_PREFIX)-ranlib
endif
CFLAGS:=$(subst ",,$(CFLAGS))

TOOLCHAIN_ENVIRONMENT = CC="$(CC)" LD=$(LD) CFLAGS="$(CFLAGS)" AR=$(AR) AS=$(AS) CPP="$(CPP)" CXX="$(CXX)" OBJCOPY=$(OBJCOPY) OBJDUMP=$(OBJDUMP) STRIP=$(STRIP) RANLIB=$(RANLIB) NM=$(NM)

EXPORT_TOOLCHAIN_ENVIRONMENT = CC="$(CC)" CXX="$(CXX)" LD=$(LD) CFLAGS="$(CFLAGS)" AR=$(AR) AS=$(AS) CPP="$(CPP)" OBJCOPY=$(OBJCOPY) OBJDUMP=$(OBJDUMP) STRIP=$(STRIP) RANLIB=$(RANLIB) NM=$(NM)

